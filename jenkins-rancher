script
            {
                File fc=new File("${WORKSPACE}/default.conf")
                fc.write('    server {\n')
                fc.append("""         listen       80;
        server_name  _;
        root         /usr/share/nginx/html;
        index       index.html;
        location / {
        }
        location /api/ {
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header Host   \$host:\$server_port;
            proxy_set_header  X-Real-IP  \$remote_addr;
            client_max_body_size 1000m;
            proxy_pass  http://ingcreations-service-gmp:9002/;
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }

                """)
                File fd=new File("${WORKSPACE}/dockerfile")
                fd.write("FROM nginx:1.18\n")
                fd.append("""COPY ./default.conf  /etc/nginx/conf.d/
COPY --chown=nginx:nginx ./soya /usr/share/nginx/html
                """)


def datestring=new Date().toString().replaceAll(" ","").minus('CST').getAt(3..-1).replaceAll(":","").toLowerCase()
def harborurl='172.16.0.146'
def qcloudurl='ccr.ccs.tencentyun.com/ingcreations-dev'
def googleurl='https://asia.gcr.io'
def awsurl='767511663737.dkr.ecr.us-east-2.amazonaws.com'
def servicename='ingcreations-herog-gm'                                //rancher上的deployment名字
def giturladds='https://git.whoot.com/ingcreations-rol/gm-golang.git'  //git仓库地址，后面有通过这个变量取值
pipeline{
    agent none
    options{
        disableConcurrentBuilds()
        skipDefaultCheckout()
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    parameters{
        gitParameter name: 'brancename', type: 'PT_BRANCH_TAG',branchFilter: 'origin/(.*)',defaultValue: 'branch_dev',selectedValue: 'DEFAULT',sortMode: 'DESCENDING_SMART',description: 'Select your branch or tag.'
        booleanParam(name: 'deploy', defaultValue: false, description: '是否发布到内网')   
        choice(description: '选择集群 ?',name: 'k8scluster',choices: ['hot-dev', 'hot-rc', 'uat-qc'])
        choice(description: '选择namespace ?',name: 'namespace',choices: ['hot-dev', 'general', '360-oa','hot-qc','hot-rc'])
        booleanParam(name: 'synqcloud', defaultValue: false, description: '是否同步镜像到qcloud') 
        booleanParam(name: 'synaws', defaultValue: false, description: '是否同步镜像到aws')
//        booleanParam(name: 'syngoogle', defaultValue: false, description: '是否同步同步到google')
//        choice(description: '选择仓库',name: 'registry',choices: ['local', 'aws', 'qcloud','google'])
    }																				
    stages{
    stage('build stage')
    {
       agent any
       steps
       {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin']){sh "ls && pwd"}
            checkout([$class: 'GitSCM',branches: [[name: "${params.brancename}"]],doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Default', submoduleCfg: [],userRemoteConfigs: [[url: "${giturladds}",credentialsId: 'jenkinsfile',]] ])
            sh '/usr/local/go1.16/bin/go get -d -v ./... && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 /usr/local/go1.16/bin/go build -o gm "这里是取自旧的job的服务名字go build 出来的可执行文件名字" application.go'
//export export GOROOT=/usr/local/go export GOPATH=$WORKSPACE/..  PATH=$GOPATH/bin:$GOROOT/bin:$PATH  GOPRIVATE=*.whoot.com &&
       }
    }
    stage('docker stage')
    {
        agent any
        steps
        {
            script
            {
                withDockerRegistry([ credentialsId: "146harborlogin", url: "https://172.16.0.146" ]) 
                {
                def localimgname=docker.build("${harborurl}/${k8scluster}/${namespace}/${servicename}:${datestring}","-f ./dockerfile .")
                localimgname.push()
                }
            }
        }
    }
    stage('deploy stage')
    {
        agent any
        steps
        {
            script
            {
              if (params.deploy)
              {
                  sh "kubectl --kubeconfig /root/.kube/${k8scluster}  set image deployment/${servicename} ${servicename}=${harborurl}/${k8scluster}/${namespace}/${servicename}:${datestring} -n ${namespace}"
                  echo "do helath check"                  
              }
              else
              { echo "only build not deploy" }
            }
        }
    }
    stage('synimg stage')
    {
        agent any
        steps
        {
            script
            {
                if (params.synaws)
                {
                    sh 'aws ecr get-login-password | docker login -u AWS --password-stdin  767511663737.dkr.ecr.us-east-2.amazonaws.com'
                    sh "docker tag  ${harborurl}/${k8scluster}/${namespace}/${servicename}:${datestring}   ${awsurl}/${servicename}:${datestring} && docker push ${awsurl}/${servicename}:${datestring} && docker rmi ${awsurl}/${servicename}:${datestring}"
                }
                if (params.synqcloud)
                {
                    withDockerRegistry([ credentialsId: "qcloudharborlogin", url: "https://ccr.ccs.tencentyun.com" ]) 
                    {
                    sh "docker tag  ${harborurl}/${k8scluster}/${namespace}/${servicename}:${datestring}  ${qcloudurl}/${servicename}:${datestring} && docker push ${qcloudurl}/${servicename}:${datestring} && docker rmi ${qcloudurl}/${servicename}:${datestring}"
                    }
                }
                
                sh "docker rmi ${harborurl}/${k8scluster}/${namespace}/${servicename}:${datestring}"    
            }
        }
    }
 }
}










def datestring=new Date().toString().replaceAll(" ","").minus('CST').getAt(3..-1).replaceAll(":","").toLowerCase()
def harborurl='aaa'
def servicename='ingcreations-service-account'
pipeline{
    agent none
    options{
        disableConcurrentBuilds()
        skipDefaultCheckout()
        timeout(time: 1, unit: 'HOURS')
        timestamps()
    }
    parameters{
        gitParameter name: 'brancename', type: 'PT_BRANCH_TAG',branchFilter: 'origin/(.*)',defaultValue: 'branch_dev',selectedValue: 'DEFAULT',sortMode: 'DESCENDING_SMART',description: 'Select your branch or tag.'
        booleanParam(name: 'deploy', defaultValue: false, description: '是否发布')   
        choice(description: '选择集群 ?',name: 'k8scluster',choices: ['hot-dev', 'hot-rc', 'uat-qc'])
        choice(description: '选择namespace ?',name: 'namespace',choices: ['hot-dev', 'general', '360-oa','hot-qc','hot-rc'])
        choice(description: '选择仓库',name: 'registry',choices: ['local', 'aws', 'qcloud','google'])
    }																				
    stages{
    stage('build stage')
    {
       agent any
       steps
       {
            withEnv(['PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin']){sh "ls && pwd"}
            checkout([$class: 'GitSCM',branches: [[name: "${params.brancename}"]],doGenerateSubmoduleConfigurations: false, extensions: [], gitTool: 'Default', submoduleCfg: [],userRemoteConfigs: [[url: 'https://git.whoot.com/ingcreations-plateform/account-golang.git',credentialsId: 'jenkinsfile',]] ])
            sh 'export GOPATH=${WORKSPACE}/.. && PATH=${GOPATH}:$PATH && /usr/local/go1.16/bin/go get -u github.com/ingcreations-dev/gokits && /usr/local/go1.16/bin/go get -d -v ./... && CGO_ENABLED=0 GOOS=linux GOARCH=amd64 /usr/local/go1.16/bin/go build -o account application.go'
       }
    }
    stage('docker stage')
    {
        agent any
        steps
        {
            script
            {
                switch (params.registry)
                {
                case "local" :
                    sh 'docker login -u admin -p Harbor12345 172.16.0.146'
                    harborurl="172.16.0.146/"
                    def localimgname=docker.build("${harborurl}${k8scluster}/${namespace}/${servicename}:${datestring}","-f ./dockerfile .")
                    localimgname.push()
                    sh "docker rmi ${harborurl}${k8scluster}/${namespace}/${servicename}:${datestring}"    
                    break
                case "qcloud" :
                    sh 'docker login -u 105169440 -p pan6539339 ccr.ccs.tencentyun.com'
                    harborurl="ccr.ccs.tencentyun.com/"                    
                    break
                case "aws" :
                    sh 'aws ecr get-login-password | docker login -u AWS --password-stdin  767511663737.dkr.ecr.us-east-2.amazonaws.com'
                    harborurl="767511663737.dkr.ecr.us-east-2.amazonaws.com/"    
                    def awsimgname=docker.build("${harborurl}${servicename}:${datestring}","-f ./dockerfile .")
                    awsimgname.push()
                    sh "docker rmi ${harborurl}${servicename}:${datestring}"    
                    break
                case "google" :
                    sh 'cat /data/application/general-image-repository-admin.json | docker login -u _json_key --password-stdin https://asia.gcr.io'
                    harborurl=='https://asia.gcr.io'
                    break
                default :
                    echo "please select a registry"
                    break
                }
            }
        }
    }
    stage('deploy stage')
    {
        agent any
        steps
        {
            script
            {
              if (params.deploy)
              { sh "kubectl --kubeconfig /root/.kube/${k8scluster}  set image deployment/${servicename} ${servicename}=${harborurl}${k8scluster}/${namespace}/${servicename}:${datestring} -n ${namespace}"}
              else
              { echo "only build not deploy" }
            }
        }
    }
    stage('health stage')
    {
      agent any
      steps
       {
          echo "${env.deploy}"
          echo "${params.k8scluster}---${params.namespace}"
          script{
            def sj=new Date()
            println(sj)
            if (sj=='aaaa'){ echo "${sjk}" }
            else { echo "else ${sj}---${JOB_NAME}" }
          }
       }
    }
 }
}









